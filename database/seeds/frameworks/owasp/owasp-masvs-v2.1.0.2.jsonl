{"page":1,"tags":["Storage","The app securely stores sensitive data."],"text":"# Storage\n\n## The app securely stores sensitive data.\n\nApps handle sensitive data coming from many sources such as the user, the backend, system services or other apps on the device and usually need to store it locally. The storage locations may be private to the app (e.g. its internal storage) or be public and therefore accessible by the user or other installed apps (e.g. public folders such as Downloads). This control ensures that any sensitive data that is intentionally stored by the app is properly protected independently of the target location."}
{"page":1,"tags":["Storage","The app prevents leakage of sensitive data."],"text":"# Storage\n\n## The app prevents leakage of sensitive data.\n\nThere are cases when sensitive data is unintentionally stored or exposed to publicly accessible locations; typically as a side-effect of using certain APIs, system capabilities such as backups or logs. This control covers this kind of unintentional leaks where the developer actually has a way to prevent it."}
{"page":1,"tags":["Cryptography","The app employs current strong cryptography and uses it according to industry best practices."],"text":"# Cryptography\n\n## The app employs current strong cryptography and uses it according to industry best practices.\n\nCryptography plays an especially important role in securing the user's data - even more so in a mobile environment, where attackers having physical access to the user's device is a likely scenario. This control covers general cryptography best practices, which are typically defined in external standards."}
{"page":1,"tags":["Cryptography","The app performs key management according to industry best practices."],"text":"# Cryptography\n\n## The app performs key management according to industry best practices.\n\nEven the strongest cryptography would be compromised by poor key management. This control covers the management of cryptographic keys throughout their lifecycle, including key generation, storage and protection."}
{"page":1,"tags":["Authentication and Authorization","The app uses secure authentication and authorization protocols and follows the relevant best practices."],"text":"# Authentication and Authorization\n\n## The app uses secure authentication and authorization protocols and follows the relevant best practices.\n\nMost apps connecting to a remote endpoint require user authentication and also enforce some kind of autho- rization. While the enforcement of these mechanisms must be on the remote endpoint, the apps also have to ensure that it follows all the relevant best practices to ensure a secure use of the involved protocols."}
{"page":1,"tags":["Authentication and Authorization","The app performs local authentication securely according to the platform best practices."],"text":"# Authentication and Authorization\n\n## The app performs local authentication securely according to the platform best practices.\n\nMany apps allow users to authenticate via biometrics or a local PIN code. These authentication mechanisms need to be correctly implemented. Additionally, some apps might not have a remote endpoint, and rely fully on local app authentication."}
{"page":1,"tags":["Authentication and Authorization","The app secures sensitive operations with additional authentication."],"text":"# Authentication and Authorization\n\n## The app secures sensitive operations with additional authentication.\n\nSome additional form of authentication is often desirable for sensitive actions inside the app. This can be done in different ways (biometric, pin, MFA code generator, email, deep links, etc) and they all need to be implemented securely."}
{"page":1,"tags":["Network Communication","The app secures all network traffic according to the current best practices."],"text":"# Network Communication\n\n## The app secures all network traffic according to the current best practices.\n\nEnsuring data privacy and integrity of any data in transit is critical for any app that communicates over the network. This is typically done by encrypting data and authenticating the remote endpoint, as TLS does. However, there are many ways for a developer to disable the platform secure defaults, or bypass them completely by using low-level APIs or third-party libraries. This control ensures that the app is in fact setting up secure connections in any situation."}
{"page":1,"tags":["Network Communication","The app performs identity pinning for all remote endpoints under the developer's control."],"text":"# Network Communication\n\n## The app performs identity pinning for all remote endpoints under the developer's control.\n\nInstead of trusting all the default root CAs of the framework or device, this control will make sure that only very specific CAs are trusted. This practice is typically called certificate pinning or public key pinning."}
{"page":1,"tags":["Platform Interaction","The app uses IPC mechanisms securely."],"text":"# Platform Interaction\n\n## The app uses IPC mechanisms securely.\n\nApps typically use platform provided IPC mechanisms to intentionally expose data or functionality. Both installed apps and the user are able to interact with the app in many different ways. This control ensures that all interactions involving IPC mechanisms happen securely."}
{"page":1,"tags":["Platform Interaction","The app uses WebViews securely."],"text":"# Platform Interaction\n\n## The app uses WebViews securely.\n\nWebViews are typically used by apps that have a need for increased control over the UI. This control ensures that WebViews are configured securely to prevent sensitive data leakage as well as sensitive functionality exposure (e.g. via JavaScript bridges to native code)."}
{"page":1,"tags":["Platform Interaction","The app uses the user interface securely."],"text":"# Platform Interaction\n\n## The app uses the user interface securely.\n\nSensitive data has to be displayed in the UI in many situations (e.g. passwords, credit card details, OTP codes in notifications). This control ensures that this data doesn't end up being unintentionally leaked due to platform mechanisms such as auto-generated screenshots or accidentally disclosed via e.g. shoulder surfing or sharing the device with another person."}
{"page":1,"tags":["Code Quality","The app requires an up-to-date platform version."],"text":"# Code Quality\n\n## The app requires an up-to-date platform version.\n\nEvery release of the mobile OS includes security patches and new security features. By supporting older versions, apps stay vulnerable to well-known threats. This control ensures that the app is running on an up-to-date platform version so that users have the latest security protections."}
{"page":1,"tags":["Code Quality","The app has a mechanism for enforcing app updates."],"text":"# Code Quality\n\n## The app has a mechanism for enforcing app updates.\n\nSometimes critical vulnerabilities are discovered in the app when it is already in production. This control ensures that there is a mechanism to force the users to update the app before they can continue using it."}
{"page":1,"tags":["Code Quality","The app only uses software components without known vulnerabilities."],"text":"# Code Quality\n\n## The app only uses software components without known vulnerabilities.\n\nTo be truly secure, a full whitebox assessment should have been performed on all app components. However, as it usually happens with e.g. for third-party components this is not always feasible and not typically part of a penetration test. This control covers \"low-hanging fruit\" cases, such as those that can be detected just by scanning libraries for known vulnerabilities."}
{"page":1,"tags":["Code Quality","The app validates and sanitizes all untrusted inputs."],"text":"# Code Quality\n\n## The app validates and sanitizes all untrusted inputs.\n\nApps have many data entry points including the UI, IPC, the network, the file system, etc. This incoming data might have been inadvertently modified by untrusted actors and may lead to bypass of critical security checks as well as classical injection attacks such as SQL injection, XSS or insecure deserialization. This control ensures that this data is treated as untrusted input and is properly verified and sanitized before it's used."}
{"page":1,"tags":["Resilience Against Reverse Engineering and Tampering","The app validates the integrity of the platform."],"text":"# Resilience Against Reverse Engineering and Tampering\n\n## The app validates the integrity of the platform.\n\nRunning on a platform that has been tampered with can be very dangerous for apps, as this may disable certain security features, putting the data of the app at risk. Trusting the platform is essential for many of the MASVS controls relying on the platform being secure (e.g. secure storage, biometrics, sandboxing, etc.). This control tries to validate that the OS has not been compromised and its security features can thus be trusted."}
{"page":1,"tags":["Resilience Against Reverse Engineering and Tampering","The app implements anti-tampering mechanisms."],"text":"# Resilience Against Reverse Engineering and Tampering\n\n## The app implements anti-tampering mechanisms.\n\nApps run on a user-controlled device, and without proper protections it's relatively easy to run a modified version locally (e.g. to cheat in a game, or enable premium features without paying), or upload a back- doored version of it to third-party app stores. This control tries to ensure the integrity of the app's intended functionality by preventing modifications to the original code and resources."}
{"page":1,"tags":["Resilience Against Reverse Engineering and Tampering","The app implements anti-static analysis mechanisms."],"text":"# Resilience Against Reverse Engineering and Tampering\n\n## The app implements anti-static analysis mechanisms.\n\nUnderstanding the internals of an app is typically the first step towards tampering with it (either dynamically, or statically). This control tries to impede comprehension by making it as difficult as possible to figure out how an app works using static analysis."}
{"page":1,"tags":["Resilience Against Reverse Engineering and Tampering","The app implements anti-dynamic analysis techniques."],"text":"# Resilience Against Reverse Engineering and Tampering\n\n## The app implements anti-dynamic analysis techniques.\n\nSometimes pure static analysis is very difficult and time consuming so it typically goes hand in hand with dynamic analysis. Observing and manipulating an app during runtime makes it much easier to decipher its behavior. This control aims to make it as difficult as possible to perform dynamic analysis, as well as prevent dynamic instrumentation which could allow an attacker to modify the code at runtime."}
{"page":1,"tags":["Privacy","The app minimizes access to sensitive data and resources."],"text":"# Privacy\n\n## The app minimizes access to sensitive data and resources.\n\nApps should only request access to the data they absolutely need for their functionality and always with informed consent from the user. This control ensures that apps practice data minimization and restricts access control, reducing the potential impact of data breaches or leaks.\n\nFurthermore, apps should share data with third parties only when necessary, and this should include enforc- ing that third-party SDKs operate based on user consent, not by default or without it. Apps should prevent third-party SDKs from ignoring consent signals or from collecting data before consent is confirmed.\n\nAdditionally, apps should be aware of the 'supply chain' of SDKs they incorporate, ensuring that no data is unnecessarily passed down their chain of dependencies. This end-to-end responsibility for data aligns with recent SBOM regulatory requirements, making apps more accountable for their data practices."}
{"page":1,"tags":["Privacy","The app prevents identification of the user."],"text":"# Privacy\n\n## The app prevents identification of the user.\n\nProtecting user identity is crucial. This control emphasizes the use of unlinkability techniques like data abstraction, anonymization and pseudonymization to prevent user identification and tracking.\n\nAnother key aspect addressed by this control is to establish technical barriers when employing complex 'fingerprint-like' signals (e.g. device IDs, IP addresses, behavioral patterns) for specific purposes. For in- stance, a fingerprint used for fraud detection should be isolated and not repurposed for audience measure- ment in an analytics SDK. This ensures that each data stream serves its intended function without risking user privacy."}
{"page":1,"tags":["Privacy","The app is transparent about data collection and usage."],"text":"# Privacy\n\n## The app is transparent about data collection and usage.\n\nUsers have the right to know how their data is being used. This control ensures that apps provide clear information about data collection, storage, and sharing practices, including any behavior a user wouldn't reasonably expect, such as background data collection. Apps should also adhere to platform guidelines on data declarations."}
{"page":1,"tags":["Privacy","The app offers user control over their data."],"text":"# Privacy\n\n## The app offers user control over their data.\n\nUsers should have control over their data. This control ensures that apps provide mechanisms for users to manage, delete, and modify their data, and change privacy settings as needed (e.g. to revoke consent). Additionally, apps should re-prompt for consent and update their transparency disclosures when they require more data than initially specified."}
